# Generated by Django 5.0.7 on 2024-08-05 10:33

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=100, verbose_name='Last Name')),
                ('birth_date', models.DateField(verbose_name='Birth Date')),
                ('profile', models.URLField(blank=True, null=True, verbose_name='Profile URL')),
                ('deleted', models.BooleanField(default=False,
                                                help_text='If False - author is active. If True - author is no longer available',
                                                verbose_name='Is Deleted')),
                ('rating', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1),
                                                                      django.core.validators.MaxValueValidator(10)],
                                               verbose_name='Author Rating')),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True, verbose_name='Category Name')),
            ],
        ),
        migrations.CreateModel(
            name='Library',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Library Name')),
                ('location', models.CharField(max_length=200, verbose_name='Location')),
                ('site', models.URLField(blank=True, null=True, verbose_name='Website')),
            ],
        ),
        migrations.CreateModel(
            name='AuthorDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('biography', models.TextField(verbose_name='Biography')),
                ('birth_city', models.CharField(blank=True, max_length=50, null=True, verbose_name='Birth City')),
                ('gender',
                 models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], max_length=50,
                                  verbose_name='Gender')),
                ('author', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='details',
                                                to='library.author')),
            ],
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Book Title')),
                ('publishing_date', models.DateField(verbose_name='Publishing Date')),
                ('summary', models.TextField(blank=True, null=True, verbose_name='Summary')),
                ('genre', models.CharField(choices=[('Fiction', 'Fiction'), ('Non-Fiction', 'Non-Fiction'),
                                                    ('Science Fiction', 'Science Fiction'), ('Fantasy', 'Fantasy'),
                                                    ('Mystery', 'Mystery'), ('Biography', 'Biography')], max_length=50,
                                           null=True, verbose_name='Genre')),
                ('page_count', models.IntegerField(blank=True, null=True,
                                                   validators=[django.core.validators.MaxValueValidator(10000)],
                                                   verbose_name='Page Count')),
                ('author',
                 models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='library.author',
                                   verbose_name='Author')),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Название события')),
                ('description', models.TextField(verbose_name='Описание события')),
                ('date', models.DateTimeField(verbose_name='Дата проведения события')),
                ('books', models.ManyToManyField(related_name='events', to='library.book', verbose_name='Книги')),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events',
                                              to='library.library', verbose_name='Библиотека')),
            ],
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=50, verbose_name='Last Name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('gender',
                 models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], max_length=50,
                                  verbose_name='Gender')),
                ('birth_date', models.DateField(verbose_name='Birth Date')),
                ('age', models.IntegerField(validators=[django.core.validators.MinValueValidator(6),
                                                        django.core.validators.MaxValueValidator(120)],
                                            verbose_name='Age')),
                ('role',
                 models.CharField(choices=[('Admin', 'Admin'), ('Staff', 'Staff'), ('Reader', 'Reader')], max_length=20,
                                  verbose_name='Role')),
                ('active', models.BooleanField(default=True, verbose_name='Active')),
                ('libraries',
                 models.ManyToManyField(related_name='members', to='library.library', verbose_name='Libraries')),
            ],
        ),
        migrations.CreateModel(
            name='EventParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_date',
                 models.DateField(default=django.utils.timezone.now, verbose_name='Дата регистрации')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants',
                                            to='library.event', verbose_name='Событие')),
                ('member',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_participations',
                                   to='library.member', verbose_name='Участник')),
            ],
        ),
        migrations.CreateModel(
            name='Borrow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('borrow_date', models.DateField(verbose_name='Borrow Date')),
                ('return_date', models.DateField(verbose_name='Return Date')),
                ('returned', models.BooleanField(default=False, verbose_name='Returned')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='borrows',
                                           to='library.book', verbose_name='Book')),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='borrows',
                                              to='library.library', verbose_name='Library')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='borrows',
                                             to='library.member', verbose_name='Member')),
            ],
        ),
        migrations.AddField(
            model_name='book',
            name='publisher',
            field=models.ForeignKey(limit_choices_to={'role': 'Staff'}, null=True,
                                    on_delete=django.db.models.deletion.SET_NULL, to='library.member',
                                    verbose_name='Publisher'),
        ),
        migrations.CreateModel(
            name='Posts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, unique_for_date='created_at', verbose_name='Post Title')),
                ('body', models.TextField(verbose_name='Post Body')),
                ('moderated', models.BooleanField(default=False, verbose_name='Moderated')),
                ('created_at', models.DateField(verbose_name='Created At')),
                ('updated_at', models.DateField(auto_now=True, verbose_name='Updated At')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts',
                                             to='library.member', verbose_name='Author')),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts',
                                              to='library.library', verbose_name='Library')),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.FloatField(validators=[django.core.validators.MinValueValidator(1),
                                                         django.core.validators.MaxValueValidator(5)],
                                             verbose_name='Rating')),
                ('description', models.TextField(verbose_name='Review')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews',
                                           to='library.book', verbose_name='Book')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews',
                                               to='library.member', verbose_name='Reviewer')),
            ],
        ),
    ]
